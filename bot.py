import telegram
from telegram.ext import Updater, CommandHandler
from logic import Match, Tournament
import time
from tabulate import tabulate
import random
import os
import logging
import psycopg2

DATABASE_URL = os.environ['DATABASE_URL']
currentTournament = Tournament()
current_emoji = "üé≤"

hello_messages = ["Hello, %s", "%s ‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä", "‘≤’°÷Ä’•÷Ç, %s", "ŸÖÿ±ÿ≠ÿ®ÿß %s", "–°–∞–ª–æ–º %s", "–ó–¥—Ä–∞–≤–æ %s", "–ó–¥—Ä–∞–≤–µ–π—Ç–µ %s",
                 "–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ %s", "–ü—Ä–∏–≤—ñ—Ç %s", "–ü—Ä–∏–≤–µ—Ç, %s", "–ü–æ–∑–¥—Ä–∞–≤ %s", "ÿ≥ŸÑÿßŸÖ ÿ®Ÿá %s", "◊©◊ú◊ï◊ù %s", "ŒìŒµŒπŒ± œÉŒ±œÇ %s",
                 "◊î◊¢◊ú◊ê %s", "€Å€åŸÑ%sŸ™ €í", "Bonjou %s", "Bonjour %s", "BunƒÉ ziua %s", "Ciao %s", "Dia duit %s",
                 "Dobr√Ω de≈à %s", "Dobr√Ω den, %s", "Habari %s", "Hall√≥ %s", "Hallo %s", "Halo %s", "Hei %s", "Hej %s",
                 "Helo %s", "Hola %s", "Kaixo %s", "Kamusta %s", "Merhaba %s",
                 "Ol√° %s", "Ola %s", "P√´rsh√´ndetje %s", "Pozdrav %s", "Pozdravljeni %s", "Salom %s", "Sawubona %s",
                 "Sveiki %s", "Tere %s", "Witaj %s", "Xin ch√†o %s", "‡∫™‡∫∞‡∫ö‡∫≤‡∫ç‡∫î‡∫µ %s", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ %s", "‡¥π‡¥≤‡µá‡¥æ %s", "‡≤π‡≤≤‡≥Ü‡≥Ç‡≥ï %s",
                 "‡∞π‡∞≤‡±ã %s", "‡§π‡•Ö‡§≤‡•ã %s", "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞%s‡§ï‡•ã", "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã %s", "‡®π‡©à‡®≤‡©ã %s", "‡™π‡´á‡™≤‡´ã %s", "‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç %s",
                 "·ÄÄ·Ä≠·ÄØ %s ·Äô·ÄÑ·Ä∫·Äπ·ÄÇ·Äú·Ä¨·Äï·Ä´", "·Éí·Éê·Éõ·Éê·É†·ÉØ·Éù·Éë·Éê %s", "·ûá·üÜ·ûö·û∂·ûî·ûü·ûΩ·ûö %s ·ûî·û∂·ûì", "„Åì„Çì„Å´„Å°„ÅØ%s", "‰Ω†Â•Ω%s", "ÏïàÎÖïÌïòÏÑ∏Ïöî  %s"]
success_start_tournament_messages = ['–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è', '–î–∞–≤–∞–π—Ç–µ-–∫–∞ –Ω–∞—á–Ω–µ–º –∏–≥—Ä–∞—Ç—å']
tournament_is_running_messages = ['–¢—É—Ä–Ω–∏—Ä –∏–¥—ë—Ç', '–°—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä']
begin_registration_messages = ['–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã–π', '–û–∂–∏–¥–∞–µ–º –∂–µ–ª–∞—é—â–∏—Ö –ø–æ—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è']
success_registration_messages = ['–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä', '–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ, –ø—Ä–∏—Å–∞–∂–∏–≤–∞–π—Ç–µ—Å—å']
few_participants_messages = ['–¢—É—Ä–Ω–∏—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç, –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞', '–ú–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤, –∂–¥—ë–º-—Å']
no_registrations_messages = ['–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è', '–ù–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å(']
list_registrations_messages = ['–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è: ']
statistics_messages = ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:']
draw_messages = ['–û–≥–æ, –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∏—á—å—é, –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞!', '–û–ø—è—Ç—å –∞–¥–º–∏–Ω –ø–æ–¥–∫—Ä—É—á–∏–≤–∞–µ—Ç, –¥–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ']
match_winner_messages = ['–ò –ø–æ–±–µ–∂–¥–∞–µ—Ç', '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞']
not_your_turn_messages = ['–≠–º, –Ω–æ –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–º –º–∞—Ç—á–µ, –ª–∏–±–æ —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥', '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥']
not_started_tournament_messages = ['–¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è', '–†–∞–Ω–æ, –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤']
match_notify_messages = ['–ú–∞—Ç—á –º–µ–∂–¥—É', '–û–±—ä—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ ']
tournament_winner_messages = ['–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞:', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ']
set_emoji_dart = ['–î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∏–¥–∞–µ–º –¥—Ä–æ—Ç–∏–∫–∏', '–¢–µ–ø–µ—Ä—å –∏–≥—Ä–∞–µ–º –≤ –¥–∞—Ä—Ç—Å']
set_emoji_dice = ['–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∏–¥–∞–µ–º –∫–æ—Å—Ç–∏', '–ì–æ—Ç–æ–≤—å—Ç–µ –≤–∞—à–∏ –∫—É–±–∏–∫–∏, –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å']
set_emoji_basketball = ['–¢—Ä–µ–Ω–µ—Ä, –≥–¥–µ –∫–æ–ª—å—Ü–æ?', '–Ø –ö—É—Ä–æ–∫–æ –¢–µ—Ü—É—è, –∏ —ç—Ç–æ –º–æ–π –±–∞—Å–∫—Ç–µ–±–æ–ª!']
wrong_arguments = ['–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã']

dice_names = ['–∫–æ—Å—Ç–∏', 'dice', 'dices']
dart_name = ['–¥–∞—Ä—Ç—Å', 'dart', 'darts']
basketball_name = ['–±–∞—Å–∫–µ—Ç–±–æ–ª', 'basketball', 'basket', 'ball']


def hard_reset(bot, chat_id):
    global currentTournament
    currentTournament = Tournament()
    bot.sendMessage(chat_id, random.choice(begin_registration_messages))


def reset(bot, update):
    hard_reset(bot, update.message.chat.id)


def test(bot, update):
    update.message.reply_text(random.choice(hello_messages) % (update.message.from_user.first_name))


def start_tournament(bot, update):
    global currentTournament
    global current_emoji
    if currentTournament.is_started():
        update.message.reply_text(random.choice(tournament_is_running_messages))
    elif currentTournament.can_be_started():
        currentTournament.start()
        chat_id = update.message.chat.id
        bot.sendMessage(chat_id, random.choice(success_start_tournament_messages))
        next_match(bot, chat_id)
    else:
        update.message.reply_text(random.choice(few_participants_messages))


def set_emoji(bot, update, args):
    global current_emoji
    if len(args) == 1:
        if args[0].lower() in dart_name:
            current_emoji = "üéØ"  # Here dart emoji
            update.message.reply_text(random.choice(set_emoji_dart))
        elif args[0].lower() in dice_names:
            current_emoji = "üé≤"  # Here dice emoji
            update.message.reply_text(random.choice(set_emoji_dice))
        elif args[0].lower() in basketball_name:
            current_emoji = "üèÄ"  # Here basketball emoji
            update.message.reply_text(random.choice(set_emoji_basketball))
        else:
            update.message.reply_text(random.choice(wrong_arguments))
    else:
        update.message.reply_text(random.choice(wrong_arguments))


def register(bot, update):
    global currentTournament
    if not currentTournament.is_started():
        currentTournament.register(update.message.from_user.username)
        update.message.reply_text(random.choice(success_registration_messages))
    else:
        update.message.reply_text(random.choice(tournament_is_running_messages))


def participants(bot, update):
    global currentTournament
    part_list = currentTournament.get_participants()
    if len(part_list) == 0:
        update.message.reply_text(random.choice(no_registrations_messages))
    else:
        message = random.choice(list_registrations_messages)
        for u in part_list:
            message += u + ' '
        update.message.reply_text(message)


def get_text_stats(stats):
    prepared_stat = []
    for p in stats:
        if p[3] != 0:
            prepared_stat.append([p[0], p[1], p[2], p[3], str(p[4] * 100 / p[3]) + '%', p[5] / p[3]])
    return '<pre>' + tabulate(prepared_stat, headers=['NAME', 'T_P', 'T_W', 'N_M', 'W_R', 'AVG'], tablefmt="simple", numalign="right", colalign="right", floatfmt=".1f") + '</pre>'


def stats(bot, update):
    with psycopg2.connect(DATABASE_URL, sslmode='require') as conn:
        with conn.cursor() as cur:
            cur.execute('SELECT * FROM winners')
            bot.sendMessage(update.message.chat.id, random.choice(statistics_messages) + '\n' + get_text_stats(cur), parse_mode=telegram.ParseMode.HTML)


def throw(bot, update):
    global currentTournament
    global current_emoji
    if currentTournament.is_started():
        user = update.message.from_user.username
        chat_id = update.message.chat.id
        if currentTournament.get_current_match().can_be_changed(user):
            number_on_dice = update.message.reply_dice(emoji=current_emoji).dice.value
            result = currentTournament.get_current_match().set_result(user, number_on_dice)
            if result is not None:
                time.sleep(5)
                if result == "!":
                    bot.sendMessage(chat_id, random.choice(draw_messages))
                else:
                    bot.sendMessage(chat_id, random.choice(match_winner_messages) + " @" + result)
                    next_match(bot, chat_id)
        else:
            update.message.reply_text(random.choice(not_your_turn_messages))
    else:
        update.message.reply_text(random.choice(not_started_tournament_messages))


def next_match(bot, chat_id):
    global currentTournament
    if not currentTournament.is_finished():
        players = currentTournament.get_current_match().get_players()
        bot.sendMessage(chat_id, random.choice(match_notify_messages) + ' @' + players[0] + ' –∏ @' + players[1])
    else:
        winner = currentTournament.get_winner()
        stats = currentTournament.get_stats()
        bot.sendMessage(chat_id, random.choice(tournament_winner_messages) + ' @' + winner)
        with psycopg2.connect(DATABASE_URL, sslmode='require') as conn:
            with conn.cursor() as cur:
                for username in stats:
                    cur.execute("INSERT INTO winners (username, tournament_points, tournament_wins, number_matches, number_wins, sum_value) "
                                "VALUES (%s, %s, %s, %s, %s, %s) ON CONFLICT DO NOTHING", (username, 0, 0, 0, 0, 0))
                    user_stats = stats[username]
                    cur.execute("UPDATE winners "
                                "SET (tournament_points, tournament_wins, number_matches, number_wins, sum_value) ="
                                " (tournament_points + %s, tournament_wins + %s, number_matches + %s, number_wins + %s, sum_value + %s)"
                                " WHERE username = %s",
                                (user_stats['tournament_points'], user_stats['tournament_wins'], user_stats['number_matches'], user_stats['number_wins'], user_stats['sum_value'], username))
        hard_reset(bot, chat_id)


def my_help(bot, update):
    update.message.reply_text(
        '1) –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register. \n'
        '2) –ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /participants. \n'
        '3) –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /begin. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.\n'
        '4) –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∏–¥ —Å–æ—Å—Ç—è–∑–∞–Ω–∏—è, –∫–æ–º–∞–Ω–¥–æ–π —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º /emoji dice|dart|basketball. \n'
        '5) –í –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–∞ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∏–≥—Ä–æ–∫–∏. –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /throw. \n'
        '6) –í —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—É—Ä–∏–Ω–∏—Ä –∫–æ–º–∞–Ω–¥–æ–π /drop.\n'
        '7) –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /stat. \n'
        'TP = Tournament Points\n'
        'TW = Tournament Wins\n'
        'MW = Match Wins\n'
        'WR = Win Rate\n'
        'AVG = Average value\n'
        '8) –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /greeting. –ó–∞–æ–¥–Ω–æ —É–∑–Ω–∞–µ—Ç–µ –Ω–µ —Å–ø–∏—Ç –ª–∏ –æ–Ω. \n')


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

if __name__ == "__main__":
    updater = Updater(os.environ["TOURNAMENT_BOT_TOKEN"])
    dp = updater.dispatcher

    # public handlers
    dp.add_handler(CommandHandler('greeting', test))
    dp.add_handler(CommandHandler('begin', start_tournament))
    dp.add_handler(CommandHandler('register', register))
    dp.add_handler(CommandHandler('participants', participants))
    dp.add_handler(CommandHandler('drop', reset))
    dp.add_handler(CommandHandler('stat', stats))
    dp.add_handler(CommandHandler('throw', throw))
    dp.add_handler(CommandHandler('emoji', set_emoji, pass_args=True))
    dp.add_handler(CommandHandler('help', my_help))

    updater.start_polling()
    updater.idle()
